#-------------------------------------------------------------------------------------------#
# Description: Widget slouzici pro zobrazovani zprav ruznych typu uzivateli
# Author:SPR
#-------------------------------------------------------------------------------------------#
package Connectors::TpvConnector::TaskOndemMethods;

#STATIC class

#3th party library
use utf8;
use strict;
use warnings;
use Try::Tiny;

#local library
#use lib qw(.. c:\Perl\site\lib\Programs\Test);
#use LoadLibrary;

use aliased 'Connectors::TpvConnector::Helper';
use aliased 'Connectors::SqlParameter';
use aliased 'Connectors::TpvConnector::Enums';
use aliased 'Programs::Services::TpvService::ServiceApps::TaskOnDemand::Enums' => 'TaskEnums';

#-------------------------------------------------------------------------------------------#
#  Package methods
#-------------------------------------------------------------------------------------------#

sub GetAllTasks {
	my $self = shift;

	my @params = ();

	my $cmd = "SELECT DISTINCT 
						JobId,
						OrderId,
						Type,
						IF(OrderId is not null, order , pcb) as OrderType 
				FROM task_ondemand;";

	my @result = Helper->ExecuteDataSet( $cmd, \@params );

}

#
sub InsertTaskJob {
	my $self     = shift;
	my $jobId    = shift;
	my $taskType = shift;

	my @params1 =
	  ( SqlParameter->new( "_JobId", Enums->SqlDbType_VARCHAR, $jobId ), SqlParameter->new( "_TaskType", Enums->SqlDbType_VARCHAR, $taskType ) );

	my $cmd1 = "SELECT
				COUNT(*) 
				FROM task_ondemand
				WHERE JobId = _JobId AND Type = _TaskType;";

	my $taskExist = Helper->ExecuteScalar( $cmd1, \@params1 );

	# Update record
	if ($taskExist) {

		# update ecord
		my @params2 =
		  ( SqlParameter->new( "_JobId", Enums->SqlDbType_VARCHAR, $jobId ), SqlParameter->new( "_TaskType", Enums->SqlDbType_VARCHAR, $taskType ) );

		my $cmd2 = "UPDATE task_ondemand 
				SET
				Updated = now()
				WHERE JobId= _JobId AND Type = _TaskType;";

		my $result = Helper->ExecuteNonQuery( $cmd2, \@params2 );

	}else{
		
		my $cmd = "INSERT INTO task_ondemand (JobId, Type) VALUES (_JobId, _TaskType);";
		Helper->ExecuteNonQuery( $cmd, \@params1 );
		
	}
}

sub DeleteTaskJob {
	my $self     = shift;
	my $jobId    = shift;
	my $taskType = shift;

	my @params =
	  ( SqlParameter->new( "_JobId", Enums->SqlDbType_VARCHAR, $jobId ), SqlParameter->new( "_TaskType", Enums->SqlDbType_VARCHAR, $taskType ) );

	my $cmd = "DELETE FROM  task_ondemand  WHERE JobId= _JobId AND Type = _TaskType;";

	my $taskExist = Helper->ExecuteScalar( $cmd, \@params );

}

#-------------------------------------------------------------------------------------------#
#  Place for testing..
#-------------------------------------------------------------------------------------------#

my ( $package, $filename, $line ) = caller;
if ( $filename =~ /DEBUG_FILE.pl/ ) {

	use aliased 'Connectors::TpvConnector::TaskOndemMethods';
	
	
	TaskOndemMethods->InsertTaskJob("d152456", TaskEnums->Data_COOPERATION);

}

1;

