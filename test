Set::Partition

#-------------------------------------------------------------------------------------------#
# Description:
# Author:SPR
#-------------------------------------------------------------------------------------------#
package Programs::Coupon::CpnWizard::Forms::WizardStep1::WizardStep1Frm;

#3th party library
use strict;
use warnings;

#local library

use aliased 'Enums::EnumsPaths';
use aliased 'Enums::EnumsGeneral';
use aliased 'Programs::Coupon::CpnWizard::Forms::WizardStep1::ConstraintList::ConstraintList';
use aliased 'Widgets::Forms::MyWxScrollPanel';

#-------------------------------------------------------------------------------------------#
#  Package methods
#-------------------------------------------------------------------------------------------#

sub new {
	my $class = shift;
	my $self  = {};
	bless $self;

	$self->{"inCAM"} = shift;
	$self->{"jobId"} = shift;

	#$self->{"layout"} = shift;

	return $self;
}

sub GetLayout {
	my $self   = shift;
	my $parent = shift;
	my $wizardStep = shift;

	my $pnlMain      = Wx::Panel->new( $parent, -1 );
	my $rowHeight    = 20;
	my $scrollPnl    = MyWxScrollPanel->new( $pnlMain, $rowHeight, );
	my $containerPnl = Wx::Panel->new( $scrollPnl, -1, );

	my $szMain      = Wx::BoxSizer->new(&Wx::wxVERTICAL);
	my $scrollSizer = Wx::BoxSizer->new(&Wx::wxVERTICAL);
	my $containerSz = Wx::BoxSizer->new(&Wx::wxVERTICAL);

	my $szRowBtns = Wx::BoxSizer->new(&Wx::wxHORIZONTAL);
	#my $szRowList = Wx::BoxSizer->new(&Wx::wxHORIZONTAL);

	# DEFINE CONTROLS

	my $btnDelGroup = Wx::Button->new( $pnlMain, -1, "Del group",      &Wx::wxDefaultPosition, [ 120, 25 ] );
	my $btnGenGroup = Wx::Button->new( $pnlMain, -1, "Generate group", &Wx::wxDefaultPosition, [ 120, 25 ] );

	$containerPnl->SetBackgroundColour( Wx::Colour->new( 0, 255, 0 ) );
	my $list = ConstraintList->new( $containerPnl, $self->{"inCAM"}, $self->{"jobId"} );
	my @constr      = $wizardStep->GetConstraints();
	my $constrGroup = $wizardStep->GetConstrGroup();

	$list->SetConstraints( \@constr, $constrGroup );

	#	$self->{"scrollPnl"}->FitInside();
	#	$self->{"scrollPnl"}->Layout();

	$containerPnl->SetSizer($containerSz);
	$scrollPnl->SetSizer($scrollSizer);

	# addpanel to siyers
	$containerSz->Add( $list,         1, &Wx::wxEXPAND );
	
	
	$scrollSizer->Add( $containerPnl, 1, &Wx::wxEXPAND );
	
	$szMain->Add( $szRowBtns, 0, &Wx::wxEXPAND | &Wx::wxALL, 1 );

	#$szMain->Add( $szRowList, 1, &Wx::wxEXPAND | &Wx::wxALL, 0 );
	$szMain->Add( $scrollPnl, 1, &Wx::wxEXPAND );
	 

	# SET EVENTS

	# BUILD STRUCTURE OF LAYOUT

	$szRowBtns->Add( $btnDelGroup, 0, &Wx::wxEXPAND | &Wx::wxALL, 1 );
	$szRowBtns->Add( $btnGenGroup, 0, &Wx::wxEXPAND | &Wx::wxALL, 0 );

	$pnlMain->SetSizer($szMain);

	# SET EVENTS
	Wx::Event::EVT_PAINT( $scrollPnl, sub { $self->__OnScrollPaint(@_) } );

	# SET REFERENCES

	$self->{"parent"}       = $parent;
	$self->{"constrList"}   = $list;
	$self->{"scrollPnl"}    = $scrollPnl;
	$self->{"containerPnl"} = $containerPnl;
	$self->{"pnlMain"} = $pnlMain;

	return $pnlMain;

}

sub __OnScrollPaint {
	my $self      = shift;
	my $scrollPnl = shift;
	my $event     = shift;

	$self->{"parent"}->Layout();

	$scrollPnl->FitInside();
	$scrollPnl->Refresh();
}

sub Load {
	my $self       = shift;
	my $wizardStep = shift;

	my @constr      = $wizardStep->GetConstraints();
	my $constrGroup = $wizardStep->GetConstrGroup();

	$self->{"constrList"}->SetConstraints( \@constr, $constrGroup );

	#	$self->{"scrollPnl"}->FitInside();
	#	$self->{"scrollPnl"}->Layout();
	#
	#	#my $total = $self->__GetItemsHeight();
	#	$self->{"scrollPnl"}->SetRowCount( scalar( \@constr ) * 22 / 10 );

	$self->{"scrollPnl"}->FitInside();

	$self->{"scrollPnl"}->Layout();
 
	my ( $width, $height ) = $self->{"containerPnl"}->GetSizeWH();

	$self->{"scrollPnl"}->SetRowCount( $height / 10 );
 
}

#-------------------------------------------------------------------------------------------#
#  Place for testing..
#-------------------------------------------------------------------------------------------#
my ( $package, $filename, $line ) = caller;
if ( $filename =~ /DEBUG_FILE.pl/ ) {

	use aliased 'Programs::Coupon::CpnWizard::WizardCore::WizardCore';
	use aliased 'Packages::InCAM::InCAM';

	my $inCAM = InCAM->new();
	my $jobId = "f13609";

}

1;

